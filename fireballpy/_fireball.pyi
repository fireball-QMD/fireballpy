import numpy as np
from numpy.typing import NDArray

def set_options(dipole_method: int, charges_method: int, ismolecule: int,
                isgamma: int, total_charge: int, mixer_method: int,
                max_iter: int, mix_order: int, beta: np.float64, w0: np.float64, tol: np.float64) -> None: ...

def set_cell(a1: NDArray[np.float64], a2: NDArray[np.float64], a3: NDArray[np.float64]) -> None: ...

def set_coords(z: NDArray[np.int32], xyz: NDArray[np.float64]) -> None: ...

def set_initial_charges(qinput: NDArray[np.float64]) -> None: ...

def update_coords(xyz: NDArray[np.float64]) -> None: ...

def set_kpoints(kpts: NDArray[np.float64], weights: NDArray[np.float64]) -> None: ...

def set_qmmm(pos: NDArray[np.float64], qs: NDArray[np.float64], rc1: np.float64, rc2: np.float64, width: np.float64) -> None: ...

def update_qmmm(pos: NDArray[np.float64]) -> None: ...

def loadfdata_from_path(fdata_path: str) -> None: ...

def call_allocate_system() -> None: ...

def get_initial_charges(qinitial: NDArray[np.float64]) -> None: ...

def scf(verbose: bool, fix_charges: bool, shell_charges: NDArray[np.float64], eigenvalues: NDArray[np.float64],
        eigenvectors: NDArray[np.complex128]) -> tuple[bool, int, int, np.float64, np.float64, NDArray[np.float64]]: ...

def calc_forces(forces: NDArray[np.float64]) -> int: ...

def get_qmmm_forces(forces: NDArray[np.float64]) -> None: ...

def get_orbitals(orbitals: NDArray[np.int32]) -> None: ...

def get_hs(sdat: NDArray[np.float64], hdat: NDArray[np.float64]) -> None: ...
