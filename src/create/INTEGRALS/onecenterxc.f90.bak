! copyright info:
!
!                             @Copyright 2004
!                           Fireball Committee
! Brigham Young University - James P. Lewis, Chair
! Arizona State University - Otto F. Sankey
! Universidad de Madrid - Jose Ortega
! Universidad de Madrid - Pavel Jelinek

! Other contributors, past and present:
! Auburn University - Jianjun Dong
! Arizona State University - Gary B. Adams
! Arizona State University - Kevin Schmidt
! Arizona State University - John Tomfohr
! Brigham Young University - Hao Wang
! Lawrence Livermore National Laboratory - Kurt Glaesemann
! Motorola, Physical Sciences Research Labs - Alex Demkov
! Motorola, Physical Sciences Research Labs - Jun Wang
! Ohio University - Dave Drabold
! University of Regensburg - Juergen Fritsch

!
! RESTRICTED RIGHTS LEGEND
! Use, duplication, or disclosure of this software and its documentation
! by the Government is subject to restrictions as set forth in subdivision
! { (b) (3) (ii) } of the Rights in Technical Data and Computer Software
! clause at 52.227-7013.

! onecenterxc.f90
! Program Description
! ===========================================================================
!       This routine calculates the one-center integrals for the exchange-
! correlation interactions.
!
!   int [n(i) (Exc - Muxc)] and <i.nu | mu[n(i)] | i.nu'>
!
!       The full charge transfer OLSXC version calculates exc and 
!  < imu|muxc|inu> separately. 
! ===========================================================================
! Original code from Juergen Fritsch
! 
! Code rewritten by:
! James P. Lewis
! Department of Physics and Astronomy
! Brigham Young University
! N233 ESC P.O. Box 24658 
! Provo, UT 841184602-4658
! FAX 801-422-2265
! Office telephone 801-422-7444
! ===========================================================================
!
! Program Declaration
! ===========================================================================
        subroutine onecenterxc (nspec, nspec_max, nsh_max, wfmax_points,     &
     &                          iexc, fraction, nsshxc, lsshxc, rcutoffa_max,&
     &                          xnocc, dqorb, iderorb, what, signature,      &
     &                          drr_rho, dqint)
        use constants
        implicit none
 
! Argument Declaration and Description
! ===========================================================================
! Input
        integer, intent (in) :: iexc
        integer, intent (in) :: nsh_max
        integer, intent (in) :: nspec
        integer, intent (in) :: nspec_max
        integer, intent (in) :: wfmax_points

        integer, intent (in), dimension (nspec_max) :: iderorb
        integer, intent (in), dimension (nspec_max) :: nsshxc
        integer, intent (in), dimension (nspec_max, nsh_max) :: lsshxc
 
        real*8, intent (in) :: fraction
 
        real*8, intent (in), dimension (nspec_max) :: dqorb
        real*8, intent (in), dimension (nspec_max) :: drr_rho
        real*8, intent (in), dimension (nspec_max) :: rcutoffa_max
        real*8, intent (in), dimension (nsh_max, nspec_max) :: xnocc
        real*8, intent (in), dimension (nsh_max, nspec_max) :: dqint 

        real tmp

        character (len=70) :: signature

        character (len=70), intent (in), dimension (nspec_max) :: what
 
! Local Parameters and Data Declaration
! ===========================================================================
 
! Local Variable Declaration and Description
! ===========================================================================
        integer ideriv
        integer irho
        integer issh
        integer iissh
        integer in1
        integer jssh
        integer jjssh
        integer L1
        integer L2
        integer ndq
        integer nnrho
        integer nssh
 
        real*8 dnuxc
        real*8 dnuxcs
        real*8 dq
        real*8 drho
        real*8 exc
        real*8 dexcc
        real*8 exc1c_0
        real*8 factor
        real*8 rcutoff
        real*8 rho
        real*8 rhomax
        real*8 rhomin
        real*8 rh
        real*8 rhp
        real*8 rhpp
        real*8 vxc
 
        real*8, dimension (:, :), allocatable :: answer
        real*8, dimension (:), allocatable :: rho1c
        real*8, dimension (:), allocatable :: rhop1c
        real*8, dimension (:), allocatable :: rhopp1c
        real*8, dimension (:), allocatable :: xnocc_in
        real*8, external :: psiofr

        real*8 qa,qb
        real*8 dq1,dq2,f0,f1,f2
        real*8 denom
        real*8 dqi(nsh_max,3)
        real*8 qmax(nsh_max)
        real*8 eexc(3,nsh_max,nsh_max)
        real*8 dexc(nsh_max)
        real*8 d2exc(nsh_max,nsh_max)
        real*8 vvxc(3,nsh_max,nsh_max,nsh_max,nsh_max)
        real*8 dvxc(nsh_max,nsh_max,nsh_max)
        real*8 d2vxc(nsh_max,nsh_max,nsh_max,nsh_max)
        integer imask (nsh_max+1)

 
! Procedure
! ===========================================================================
! Open the file to store the onecenter data.
        open (unit = 36, file = 'coutput/xc_onecenter.dat', status = 'unknown')
 
! Set up the header for the output file.
        write (36,100)
        write (36,*) ' All one center matrix elements '
        write (36,*) ' created by: '
        write (36,200) signature
 
        do in1 = 1, nspec
         write (36,300) what(in1)
        end do
        write (36,100)
 
! Loop over the different charge types (0, -1, or +1).
        allocate (rho1c (wfmax_points))
        allocate (rhop1c (wfmax_points))
        allocate (rhopp1c (wfmax_points))
        do ideriv = 0, 2
         write (36,*) ' derivative ', ideriv
 
! Loop over the species
         do in1 = 1, nspec
          nssh = nsshxc(in1)
          write (36,400) in1, nssh
 
! Needed for charge corrections:
          dq = dqorb(in1)
          jssh = iderorb(in1)
 
          drho = drr_rho(in1)
          rcutoff = rcutoffa_max(in1)
          allocate (xnocc_in (nssh))
          xnocc_in(1:nssh) = xnocc(1:nssh,in1)
 
! Obtain the density and respective derivatives needed for evaluating the
! exchange-correlation interactions (LDA or GGA).
          call rho1c_store (in1, nsh_max, nssh, dq, jssh, drho, rcutoff,     &
     &                      xnocc_in, ideriv + 1, wfmax_points, rho1c,       &
     &                      rhop1c, rhopp1c)
 
! Integrals <i|exc(i)-mu(i)|i> and <i.nu|mu(i)|i.nu'>
! ***************************************************************************
! First initialize the answer array
          exc1c_0 = 0.0d0
          allocate (answer (nssh, nssh))
          answer = 0.0d0

! Fix the endpoints and initialize the increments dz and drho.
          rhomin = 0.0d0
          rhomax = rcutoff
 
          nnrho = nint((rhomax - rhomin)/drho) + 1
 
! Here we loop over rho.
          do irho = 1, nnrho
           rho = rhomin + dfloat(irho - 1)*drho
 
           factor = 2.0d0*drho/3.0d0
           if (mod(irho, 2) .eq. 0) factor = 4.0d0*drho/3.0d0
           if (irho .eq. 1 .or. irho .eq. nnrho) factor = drho/3.0d0
 
! Compute the exchange correlation potential
! Convert to atomic units.
           rho = rho/abohr
           rh = rho1c(irho)*abohr**3
           rhp = rhop1c(irho)*abohr**4
           rhpp = rhopp1c(irho)*abohr**5
           call get_potxc1c (iexc, fraction, rho, rh, rhp, rhpp, exc, vxc,   &
     &                       dnuxc, dnuxcs, dexcc)
 
! Convert to eV units
           vxc = hartree*vxc
           exc = hartree*exc
           rho = rho*abohr
 
! Add to integral -- factor*rho*rho weight factor for the radial integral
           exc1c_0 = exc1c_0 + 4.0d0*pi*rho1c(irho)*(exc - vxc)*factor*rho**2
           do issh = 1, nssh
            L1 = lsshxc(in1,issh)
            do jssh = 1, nssh
             L2 = lsshxc(in1,jssh)
             if (L1 .eq. L2) then
              answer(issh,jssh) = answer(issh,jssh)                          &
     &         + psiofr(in1,issh,rho)*vxc*psiofr(in1,jssh,rho)*factor*rho**2
             end if
            end do
           end do
          end do
          write (36,500) exc1c_0
          do issh = 1, nssh
           write (36,501) answer(issh,1:nssh)
          end do
          deallocate (xnocc_in)
          deallocate (answer)
         end do
        end do
 
        write (36,*) '  '
        do in1 = 1, nspec
         write (36,600) iderorb(in1), dqorb(in1)
        end do
 
        write (*,*) '  '
        write (*,*) ' Writing output to: coutput/xc_onecenter.dat '
        write (*,*) '  '
 
        close (unit = 36)

! ***************************************************************************
! OSLXC - charge transfer, <imu|V_xc(rho_0+rho')|inu>
! We only use charge correction on XC-energy now (2-center Vxc charge 
! correction must be included). The charge correction is evaluated but is not 
! used in FIREBALL. The information is read in FIREBALL, but not used.
! ***************************************************************************
! Open the file to store the onecenter data.
        open (unit = 36, file = 'coutput/xc1c_dqi.dat', status = 'unknown')
 
! Set up the header for the output file.
        write (36,100)
        write (36,*) ' All one center matrix elements '
        write (36,*) ' created by: '
        write (36,200) signature
 
        do in1 = 1, nspec
         write (36,300) what(in1)
        end do
        write (36,100)

! set number of derivatives steps to take
        ndq = 3 

! Loop over the species
        do in1 = 1, nspec
         nssh = nsshxc(in1)
         write (36,400) in1, nssh
         allocate (xnocc_in (nssh))

! set max charge for each type of shell           
         do issh = 1,nssh
          if (lsshxc(in1,issh) .eq. 0) qmax(issh) = 2.0d0
          if (lsshxc(in1,issh) .eq. 1) qmax(issh) = 6.0d0
          if (lsshxc(in1,issh) .eq. 2) qmax(issh) = 10.0d0
         end do

! set dqi
! Loop over number of shells           
         do issh = 1,nssh
          do ideriv = 1, ndq
           dqi(issh,ideriv) = 0.0d0
          end do
          qa = xnocc(issh,in1) + dqint(issh,in1)
          qb = xnocc(issh,in1) - dqint(issh,in1)              

! 1.test: max charge of the shell s=2, p=6, d=10
          if (qa .gt. qmax(issh)) then
! Loop over the steps (ndq = 3) '0,-dq,-2dq'
           do ideriv = 1, ndq
            dqi(issh,ideriv) = dqi(issh,ideriv) - real(ideriv-1)*dqint(issh,in1)
           end do

! 2.test: negative charge of the shell 
          else if (qb .lt. 0.0d0) then
! Loop over the steps (ndq = 3) '0,+dq,+2dq'
           do ideriv = 1, ndq
            dqi(issh,ideriv) = dqi(issh,ideriv) + real(ideriv-1)*dqint(issh,in1)
           end do
          else
! Loop over the steps (ndq = 3) '0,-dq,+dq'
           dqi(issh,1) = 0.0d0
           dqi(issh,2) = -1.0*dqint(issh,in1) 
           dqi(issh,3) = dqint(issh,in1) 
          end if

! Evaluate f(dqi)
          do ideriv = 1, ndq

! Needed for charge corrections:
           drho = drr_rho(in1)
           rcutoff = rcutoffa_max(in1)
! Set charges with respect to dqi
           do jssh = 1, nssh
            xnocc_in(jssh) = xnocc(jssh,in1)
           end do
           dq = dqi(issh,ideriv) 
           xnocc_in(issh) = xnocc_in(issh) + dq 

! Obtain the density and respective derivatives needed for evaluating the
! exchange-correlation interactions (LDA or GGA).
! We have to avoid change xnocc_in !!
           call rho1c_store (in1, nsh_max, nssh, 0.0d0, 1, drho, rcutoff,    &
     &                       xnocc_in, 1, wfmax_points, rho1c, rhop1c, rhopp1c)
 
! Integrals <i|exc(i)|i> and <i.nu|mu(i)|i.nu'>
! ***************************************************************************
! First initialize the answer array
           eexc(ideriv,issh,issh) = 0.0d0
           do iissh = 1, nssh
            do jjssh = 1, nssh
             vvxc(ideriv,issh,issh,iissh,jjssh) = 0.0d0
            end do
           end do
 
! Fix the endpoints and initialize the increments dz and drho.
           rhomin = 0.0d0
           rhomax = rcutoff
           nnrho = nint((rhomax - rhomin)/drho) + 1
                 
! Here we loop over rho.
           do irho = 1, nnrho
            rho = rhomin + dfloat(irho - 1)*drho
            factor = 2.0d0*drho/3.0d0
            if (mod(irho, 2) .eq. 0) factor = 4.0d0*drho/3.0d0
            if (irho .eq. 1 .or. irho .eq. nnrho) factor = drho/3.0d0
 
! Compute the exchange correlation potential
! Convert to atomic units.
            rho = rho/abohr
            rh = rho1c(irho)*abohr**3
            rhp = rhop1c(irho)*abohr**4
            rhpp = rhopp1c(irho)*abohr**5
            call get_potxc1c (iexc, fraction, rho, rh, rhp, rhpp, exc, vxc,  &
     &                        dnuxc, dnuxcs, dexcc)
 
! Convert to eV units
            vxc = hartree*vxc
            exc = hartree*exc
            rho = rho*abohr
 
! Add to integral -- factor*rho*rho weight factor for the radial integral
            eexc(ideriv,issh,issh) = eexc(ideriv,issh,issh)                  &
     &                              + 4.0d0*pi*rho1c(irho)*exc*factor*rho**2
            do iissh = 1, nssh
             L1 = lsshxc(in1,iissh)
             do jjssh = 1, nssh
              L2 = lsshxc(in1,jjssh)
              if (L1 .eq. L2) then
               vvxc(ideriv,issh,issh,iissh,jjssh) =                          &
     &          vvxc(ideriv,issh,issh,iissh,jjssh)                           &
     &           + psiofr(in1,iissh,rho)*vxc*psiofr(in1,jjssh,rho)*factor*rho**2
              end if
             end do
            end do
           end do ! do irho = 1, nnrho

! Print f(0,0,0) terms
           if (ideriv .eq. 1 .and. issh .eq. 1 ) then 
            write (36,500) eexc(ideriv,issh,issh)
            do iissh = 1, nssh
             write (36,501) (vvxc(ideriv,issh,issh,iissh,jjssh),jjssh = 1, nssh)
            end do
           end if
          end do ! do ideriv = 1,ndq

! Little bit formulae:
! 1.derivative
! df/dq = dq2^2*(f(dq1) - f(0)) - dq1^2*(f(dq2) - f(0))/(dq2^2*dq1 - dq1^2*dq2)
!
! 2.derivative
! d2f/d2q = 2*[ dq2*( f(dq1) - f(0) ) - dq1*( f(dq2) - f(0) ) ]  /
!                         / ((dq1^2)*dq2 - (dq2^2)*dq1)
!
! Time to make derivative with respect to dqi
          dq1 = dqi(issh,2)
          dq2 = dqi(issh,3)
          f0 =  eexc(1,issh,issh)
          f1 =  eexc(2,issh,issh)
          f2 =  eexc(3,issh,issh)              
              
          ! first derivative
          denom = dq2*dq2*(f1-f0) - dq1*dq1*(f2-f0) 
          factor = dq1*dq2*dq2 - dq1*dq1*dq2
          dexc(issh) = denom/factor
          ! second derivative
          denom = 2.*(dq2*(f1-f0) - dq1*(f2-f0)) 
          factor = dq1*dq1*dq2 - dq1*dq2*dq2
          d2exc(issh,issh) = denom/factor
 
          do iissh = 1,nssh
           do jjssh = 1,nssh
            f0 =  vvxc(1,issh,issh,iissh,jjssh)
            f1 =  vvxc(2,issh,issh,iissh,jjssh)
            f2 =  vvxc(3,issh,issh,iissh,jjssh)              
                    
            ! first derivative
            denom = dq2*dq2*(f1-f0) - dq1*dq1*(f2-f0) 
            factor = dq1*dq2*dq2 - dq1*dq1*dq2
            dvxc(issh,iissh,jjssh) = denom/factor
            ! second derivative
            denom = 2.*(dq2*(f1-f0) - dq1*(f2-f0)) 
            factor = dq1*dq1*dq2 - dq1*dq2*dq2
            d2vxc(issh,issh,iissh,jjssh) = denom/factor
           end do ! end do jjssh 
          end do ! end do iissh 
 
! print in the interaction file
          do iissh = 2, nssh + 1
           imask(iissh) = 0
          end do
          imask(issh + 1) = 1
          imask(1) = 1

          write (36,480) (imask(iissh), iissh = 1, nssh + 1)
          write (36,500) dexc(issh)
          do iissh = 1,nssh
           write (36,501) (dvxc(issh,iissh,jjssh), jjssh = 1, nssh)
          end do

          imask(1) = 2
          write (36,480) (imask(iissh), iissh = 1, nssh + 1)
          write (36,500) d2exc(issh,issh)
          do iissh = 1,nssh
           write (36,501) (d2vxc(issh,issh,iissh,jjssh), jjssh = 1, nssh)
          end do
         end do ! end 'do issh'

! d2f/dqidqj
         do issh = 1, nssh
          do jssh = issh + 1, nssh
           ideriv = 2
           drho = drr_rho(in1)
           rcutoff = rcutoffa_max(in1)
! Set charges with respect to dqi
           do iissh = 1, nssh
            xnocc_in(iissh) = xnocc(iissh,in1)
           end do
           dq = dqi(issh,ideriv) 
           xnocc_in(issh) = xnocc_in(issh) + dq 
           dq = dqi(jssh,ideriv) 
           xnocc_in(jssh) = xnocc_in(jssh) + dq 

! Obtain the density and respective derivatives needed for evaluating the
! exchange-correlation interactions (LDA or GGA).
! We have to avoid change xnocc_in !!
           call rho1c_store (in1, nsh_max, nssh, 0.0d0, 1, drho, rcutoff,    &
     &                       xnocc_in, 1, wfmax_points, rho1c, rhop1c, rhopp1c)
 
! Integrals <i|exc(i)|i> and <i.nu|mu(i)|i.nu'>
! ***************************************************************************
! First initialize the answer array
           eexc(ideriv,issh,jssh) = 0.0d0
           do iissh = 1, nssh
            do jjssh = 1, nssh
             vvxc(ideriv,issh,jssh,iissh,jjssh) = 0.0d0
            end do
           end do
 
! Fix the endpoints and initialize the increments dz and drho.
           rhomin = 0.0d0
           rhomax = rcutoff
           nnrho = nint((rhomax - rhomin)/drho) + 1

! Here we loop over rho.
           do irho = 1, nnrho
            rho = rhomin + dfloat(irho - 1)*drho
            factor = 2.0d0*drho/3.0d0
            if (mod(irho, 2) .eq. 0) factor = 4.0d0*drho/3.0d0
            if (irho .eq. 1 .or. irho .eq. nnrho) factor = drho/3.0d0
 
! Compute the exchange correlation potential
! Convert to atomic units.
            rho = rho/abohr
            rh = rho1c(irho)*abohr**3
            rhp = rhop1c(irho)*abohr**4
            rhpp = rhopp1c(irho)*abohr**5
            call get_potxc1c (iexc, fraction, rho, rh, rhp, rhpp, exc, vxc,  &
     &                        dnuxc, dnuxcs, dexcc)
 
! Convert to eV units
            vxc = hartree*vxc
            exc = hartree*exc
            rho = rho*abohr
 
! Add to integral -- factor*rho*rho weight factor for the radial integral
            eexc(ideriv,issh,jssh) = eexc(ideriv,issh,jssh)                  &
     &                              + 4.0d0*pi*rho1c(irho)*exc*factor*rho**2
            do iissh = 1, nssh
             L1 = lsshxc(in1,iissh)
             do jjssh = 1, nssh
              L2 = lsshxc(in1,jjssh)
              if (L1 .eq. L2) then
               vvxc(ideriv,issh,jssh,iissh,jjssh) =                          &
     &          vvxc(ideriv,issh,jssh,iissh,jjssh)                           &
     &           + psiofr(in1,iissh,rho)*vxc*psiofr(in1,jjssh,rho)*factor*rho**2
              end if
             end do
            end do
           end do ! do irho = 1, nnrho

!=======================================================
! derivative cross term 
! d2f / (dqi dqj)                 
! ======================================================
! formulae:
! d2f_i,j = [ f(0,0) - f(1,1) - df_i*dqi - df_j*dqj 
!                       - 1/2*d2f_i*dqi^2 - 1/2*d2f_j*dqj^2 ] / [ dqi*dqj ]
!
! Time to make derivative with respect to dqi
           dq1 = dqi(issh,2)
           dq2 = dqi(jssh,2)
           f0 =  eexc(1,issh,issh)
           f1 =  eexc(ideriv,issh,jssh)
           denom = f1 - f0 - dexc(issh)*dq1 - dexc(jssh)*dq2                 &
     &            - 0.5*d2exc(issh,issh)*dq1*dq1 - 0.5*d2exc(jssh,jssh)*dq2*dq2
           factor = dq1*dq2
           d2exc(issh,jssh) = denom/factor

           do iissh = 1, nssh
            do jjssh = 1,nssh
             f0 =  vvxc(1,issh,issh,iissh,jjssh)
             f1 =  vvxc(ideriv,issh,jssh,iissh,jjssh)
             ! second derivative
             denom = f1 - f0 - dvxc(issh,iissh,jjssh)*dq1                    &
     &              - dvxc(jssh,iissh,jjssh)*dq2                             &
     &              - 0.5*d2vxc(issh,issh,iissh,jjssh)*dq1*dq1               &
     &              - 0.5*d2vxc(jssh,jssh,iissh,jjssh)*dq2*dq2  
             factor = dq1*dq2
             d2vxc(issh,jssh,iissh,jjssh) = denom/factor
            end do ! end do jjssh 
           end do ! end do iissh 

! print in the interaction file
           do iissh = 1, nssh + 1
            imask(iissh) = 0
           end do
           imask(issh + 1) = 1
           imask(jssh + 1) = 1
           imask(1) = 2
           write (36,480) (imask(iissh), iissh = 1, nssh + 1)
           write (36,500) d2exc(issh,jssh)
           do iissh = 1,nssh
            write (36,501) (d2vxc(issh,jssh,iissh,jjssh), jjssh = 1, nssh)
           end do
          end do ! end do jssh 
         end do ! end do issh
         deallocate (xnocc_in)
        end do ! do in1 = 1, nspec

        write (*,*) '  '
        write (*,*) ' Writing output to: coutput/xc1c_dqi.dat '
        write (*,*) '  '
        close (unit = 36)

! Deallocate Arrays
! ===========================================================================
        deallocate (rho1c, rhop1c, rhopp1c)
 
! Format Statements
! ===========================================================================
100     format (70('='))
200     format (2x, a45)
300     format (a70)
400     format (2x, i3, 2x, i3)
450     format (2x, i3, 2x, i3, 2x, i3)
470     format (2x, f7.3, 1x, f7.3, 1x, f7.3)
480     format (2x, i3, 4x, i3, 2x, i3, 2x, i3, 2x, i3, 2x, i3, 2x, i3)
500     format (8d20.10)
501     format (8d20.10)
600     format (1x, i3, 2x, f10.5)
 
        return
      end subroutine onecenterxc
